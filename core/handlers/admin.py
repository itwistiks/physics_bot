from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Text
from core.fsm.states import AdminStates
from aiogram.filters import StateFilter

from sqlalchemy import select, func, text

from core.services.reminder_service import ReminderService, send_inactivity_reminders
from core.filters.admin import IsAdminFilter
from core.database.models import (
    User,
    UserStat,
    Topic,
    Task,
    UserProgress,
    UserAchievement,
    Achievement
)

from core.services.stats_service import reset_all_weekly_points

from config.database import AsyncSessionLocal

import logging


logger = logging.getLogger(__name__)


router = Router()


@router.message(Command("users"), IsAdminFilter())
async def cmd_users(message: types.Message):
    async with AsyncSessionLocal() as session:
        users = await session.scalars(select(User))
        user_list = "\n".join(
            f"{user.id} | @{user.username or '–Ω–µ—Ç'} | {user.status.value}"
            for user in users
        )

    await message.answer(f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")


# @router.message(Command("simulate_inactivity"), IsAdminFilter())
# async def simulate_inactivity(message: Message):
#     from datetime import datetime, timedelta
#     """–ò–º–∏—Ç–∏—Ä—É–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∞"""
#     async with AsyncSessionLocal() as session:
#         user = await session.get(User, message.from_user.id)
#         user.last_interaction_time = datetime.utcnow() - timedelta(hours=25)
#         session.add(user)
#         await session.commit()
#     await message.answer("‚úÖ –í–∞—à–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ 25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥")


@router.message(Command("test_reminder"), IsAdminFilter())
async def test_reminder(message: types.Message, bot: Bot):  # –î–æ–±–∞–≤—å—Ç–µ bot –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """–¢–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        await send_inactivity_reminders(bot)  # –ü–µ—Ä–µ–¥–∞–µ–º bot –Ω–∞–ø—Ä—è–º—É—é
        await message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("send_reminders"), IsAdminFilter())
async def cmd_send_reminders(message: types.Message, bot: Bot):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    try:
        service = ReminderService(bot)
        results = await service.send_reminders()

        await message.answer(
            "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:\n"
            f"‚Ä¢ PROMO: {results.get('promo', 0)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n"
            f"‚Ä¢ INACTIVE: {results.get('inactive', 0)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º\n\n"
            f"–°–ª–µ–¥—É—é—â–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {service.check_interval//3600} —á"
        )
    except Exception as e:
        logger.error(f"Error in send_reminders: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


@router.message(Command("reset_weekly"), IsAdminFilter())
async def confirm_reset_weekly(message: types.Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω—É–ª–µ–Ω–∏—è weekly points"""
    confirm_kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å weekly points –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        reply_markup=confirm_kb
    )
    await state.set_state(AdminStates.CONFIRM_WEEKLY_RESET)


@router.message(
    Text("‚úÖ –î–∞, –æ–±–Ω—É–ª–∏—Ç—å"),
    StateFilter(AdminStates.CONFIRM_WEEKLY_RESET),
    IsAdminFilter()
)
async def execute_reset_weekly(message: types.Message, state: FSMContext):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±–Ω—É–ª–µ–Ω–∏–µ weekly points –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    async with AsyncSessionLocal() as session:
        try:
            count = await reset_all_weekly_points(session)
            await message.answer(
                f"‚ôªÔ∏è Weekly points –æ–±–Ω—É–ª–µ–Ω—ã –¥–ª—è {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=types.ReplyKeyboardRemove()
            )
        except Exception as e:
            logger.error(f"Error in reset_weekly: {e}")
            await message.answer(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ weekly points",
                reply_markup=types.ReplyKeyboardRemove()
            )
        finally:
            await state.clear()


@router.message(
    Text("‚ùå –û—Ç–º–µ–Ω–∞"),
    StateFilter(AdminStates.CONFIRM_WEEKLY_RESET),
    IsAdminFilter()
)
async def cancel_reset_weekly(message: types.Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –æ–±–Ω—É–ª–µ–Ω–∏—è"""
    await message.answer(
        "‚ùå –û–±–Ω—É–ª–µ–Ω–∏–µ weekly points –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


@router.message(Command("ahelp"), IsAdminFilter())
async def cmd_help(message: types.Message):
    help_text = """
/users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/test_reminder - —Ç–µ—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
/send_reminders - —Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
/reset_weekly - –æ–±–Ω—É–ª—è–µ—Ç weekly_points —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
    await message.answer(help_text, parse_mode="HTML")
