from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message

from sqlalchemy import select, func

from core.filters.admin import IsAdminFilter
from core.database.models import (
    User,
    UserStat,
    Topic,
    Task,
    UserProgress,
    UserAchievement,
    Achievement
)

from config.database import AsyncSessionLocal


router = Router()


@router.message(Command("users"), IsAdminFilter())
async def cmd_users(message: types.Message):
    async with AsyncSessionLocal() as session:
        users = await session.scalars(select(User))
        user_list = "\n".join(
            f"{user.id} | @{user.username or '–Ω–µ—Ç'} | {user.status.value}"
            for user in users
        )

    await message.answer(f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n{user_list}")


# –ü–æ–∫–∞ –Ω–µ—Ä–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# @router.message(Command("mystats"))
# async def cmd_show_stats(message: types.Message):
#     async with AsyncSessionLocal() as session:
#         # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
#         user = await session.get(User, message.from_user.id)
#         if not user:
#             await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
#             return

#         # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         progress = await session.get(UserProgress, message.from_user.id)

#         # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
#         stats = await session.execute(
#             select(UserStat, Topic.title_ru)
#             .join(Topic, UserStat.topic_id == Topic.id)
#             .where(
#                 (UserStat.user_id == message.from_user.id) &
#                 # –¢–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º (–±–µ–∑ –ø–æ–¥—Ç–µ–º)
#                 (UserStat.subtopic_id.is_(None))
#             )
#             .order_by(UserStat.percentage.desc())
#         )

#         # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         achievements = await session.execute(
#             select(UserAchievement, Achievement)
#             .join(Achievement, UserAchievement.achievement_id == Achievement.id)
#             .where(UserAchievement.user_id == message.from_user.id)
#         )

#         # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
#         response = [
#             f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>",
#             f"",
#             f"üë§ <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>",
#             f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {user.status.value}",
#             f"‚Ä¢ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}",
#             f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_interaction_time.strftime('%d.%m.%Y %H:%M')}",
#             f"",
#             f"üìà <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b>",
#             f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {progress.current_streak} –¥–Ω–µ–π",
#             f"‚Ä¢ –í—Å–µ–≥–æ –æ—á–∫–æ–≤: {progress.total_points}",
#             f"‚Ä¢ –û—á–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é: {progress.weekly_points}",
#             f"‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Ä–µ–∫–æ—Ä–¥: {progress.daily_record} –∑–∞–¥–∞—á",
#             f"",
#             f"üèÜ <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>"
#         ]

#         # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
#         for ua, achievement in achievements:
#             if ua.unlocked_at:
#                 response.append(
#                     f"‚Ä¢ {achievement.name} ‚úÖ ({ua.unlocked_at.strftime('%d.%m.%Y')})")
#             else:
#                 response.append(f"‚Ä¢ {achievement.name} - {ua.progress}%")

#         response.extend([
#             f"",
#             f"üìö <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:</b>"
#         ])

#         # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
#         for stat, topic_name in stats:
#             response.append(
#                 f"‚Ä¢ {topic_name}: "
#                 f"{stat.correct_answers}/{stat.total_attempts} "
#                 f"({stat.percentage:.1f}%)"
#             )

#         await message.answer("\n".join(response), parse_mode="HTML")


@router.message(Command("test_transaction"))
async def test_transaction(message: Message):
    """–¢–µ—Å—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
    try:
        async with AsyncSessionLocal() as session:
            async with session.begin():
                count = await session.scalar(select(func.count(Task.id)))
                await message.answer(f"–í—Å–µ–≥–æ –∑–∞–¥–∞—á: {count}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")
