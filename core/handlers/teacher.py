from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select

from core.filters.admin import IsTeacherFilter
from core.database.models import User, UserStat, UserProgress
from config.database import AsyncSessionLocal

router = Router()


@router.message(Command("student_progress"), IsTeacherFilter())
async def cmd_student_progress(message: types.Message):
    """–ü—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ username"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split()
        if len(parts) < 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /student_progress @username")
            return

        # –£–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        username_search = parts[1].lstrip('@').lower()

        async with AsyncSessionLocal() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —á–∞—Å—Ç–∏ username
            users = await session.scalars(
                select(User).where(User.username.ilike(f"%{username_search}%"))
            )

            users_list = list(users)

            if not users_list:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if len(users_list) > 1:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_list_text = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(users_list[:10], 1):
                    user_list_text += f"{i}. @{user.username} (ID: {user.id})\n"

                if len(users_list) > 10:
                    user_list_text += f"\n... –∏ –µ—â–µ {len(users_list) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

                user_list_text += "\n\n–£—Ç–æ—á–Ω–∏—Ç–µ username"
                await message.answer(user_list_text)
                return

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = users_list[0]
            stats = await session.get(UserStat, user.id)
            progress = await session.get(UserProgress, user.id)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å
            accuracy = 0
            if stats and stats.total_attempts > 0:
                accuracy = (stats.correct_answers / stats.total_attempts) * 100

            progress_text = (
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞:\n"
                f"üë§ ID: {user.id}\n"
                f"üìõ Username: @{user.username or '–Ω–µ—Ç'}\n"
                f"üéØ –°—Ç–∞—Ç—É—Å: {user.status.value}\n\n"
                f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {stats.total_attempts if stats else 0}\n"
                f"‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {stats.correct_answers if stats else 0}\n"
                f"üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%\n\n"
                f"‚ö° –ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
                f"üíé –í—Å–µ–≥–æ XP: {progress.total_points if progress else 0}\n"
                f"üìÖ –ó–∞ –Ω–µ–¥–µ–ª—é: {progress.weekly_points if progress else 0}\n"
                f"üî• –°–µ—Ä–∏—è –¥–Ω–µ–π: {progress.current_streak if progress else 0}\n"
                f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_interaction_time.strftime('%d.%m.%Y %H:%M') if user.last_interaction_time else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}"
            )

            await message.answer(progress_text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("send_feedback"), IsTeacherFilter())
async def cmd_send_feedback(message: types.Message, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Å—Ç—É–¥–µ–Ω—Ç—É –ø–æ username"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_feedback @username <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
            return

        # –£–±–∏—Ä–∞–µ–º @ –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        username_search = parts[1].lstrip('@').lower()
        feedback_text = parts[2]

        async with AsyncSessionLocal() as session:
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —á–∞—Å—Ç–∏ username
            users = await session.scalars(
                select(User).where(User.username.ilike(f"%{username_search}%"))
            )

            users_list = list(users)

            if not users_list:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            if len(users_list) > 1:
                # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                user_list_text = "–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                for i, user in enumerate(users_list[:10], 1):
                    user_list_text += f"{i}. @{user.username} (ID: {user.id})\n"

                if len(users_list) > 10:
                    user_list_text += f"\n... –∏ –µ—â–µ {len(users_list) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"

                user_list_text += "\n\n–£—Ç–æ—á–Ω–∏—Ç–µ username"
                await message.answer(user_list_text)
                return

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user = users_list[0]

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await bot.send_message(
                    user.id,
                    f"üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:\n\n{feedback_text}\n\n"
                    f"üí° –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                )
                await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username}")
            except Exception as e:
                await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{user.username}: {str(e)}")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("thelp"), IsTeacherFilter())
async def cmd_thelp(message: types.Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    help_text = (
        "üë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n\n"
        "/student_progress [@username] - –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞\n\n"
        "/send_feedback [@username] [message] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"
    )
    await message.answer(help_text)
