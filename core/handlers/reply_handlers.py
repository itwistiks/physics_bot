from config.settings import ADMIN_USER_ID, LEADS_TOKEN
from config.database import AsyncSessionLocal

from datetime import datetime, timedelta

import aiohttp

from aiogram.fsm.state import State, StatesGroup, default_state
from aiogram.fsm.context import FSMContext
from aiogram.filters import or_f, StateFilter
from aiogram import Router, types, F
from aiogram.filters import Text
from aiogram.types import Message, CallbackQuery

from core.keyboards.reply import (
    main_menu_kb,
    practice_menu_kb,
    cancel_kb,
    tasks_menu_kb,
    task_navigation_kb
)
from core.keyboards.inline import (
    part_one_types_kb,
    answer_options_kb,
    theory_solution_kb
)

from sqlalchemy import select
from sqlalchemy.orm import selectinload
import random

from core.database.models import Task, Theory

from core.services.task_utils import get_random_task
from core.fsm.states import TaskStates
from core.services.task_display import display_task, display_task_by_id
from core.services.task_utils import get_shuffled_task_ids


router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" –∏ –∞–Ω—Ç–∏—Å–ø–∞–º


user_cooldowns = {}

# –í—Ä–µ–º—è –¥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
time_stop = 10


class SupportStates(StatesGroup):
    waiting_for_message = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(Text("‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    last_request = user_cooldowns.get(user_id)
    if last_request and (datetime.now() - last_request) < timedelta(minutes=time_stop):
        remaining = (last_request + timedelta(minutes=time_stop)
                     ) - datetime.now()
        await message.answer(
            f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining.seconds // 60} –º–∏–Ω.",
            reply_markup=main_menu_kb()
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    user_cooldowns[user_id] = datetime.now()

    await state.set_state(SupportStates.waiting_for_message)
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=cancel_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ –ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É


@router.message(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
async def cancel_support(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_menu_kb()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É


@router.message(SupportStates.waiting_for_message)
async def handle_support_message(message: types.Message, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # print(f"üü¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        async with aiohttp.ClientSession() as session:
            await session.post(
                f"https://api.telegram.org/bot{LEADS_TOKEN}/sendMessage",
                json={
                    "chat_id": ADMIN_USER_ID,
                    "text": f"‚úâÔ∏è –ü–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \n\n–¢–µ–ª–µ–≥—Ä–∞–º: @{message.from_user.username}\nID: {message.from_user.id}\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}\n\n‚è±Ô∏è {datetime.now()}",
                    "parse_mode": "HTML"
                }
            )

        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=main_menu_kb()
        )
        await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ",
            reply_markup=main_menu_kb()
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–∫—Ç–∏–∫–∞"


@router.message(Text("‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞"))
async def practice_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏",
        reply_markup=practice_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"


@router.message(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def show_stats(message: types.Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await message.answer(
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä"


@router.message(Text("üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä"))
async def tutor_redirect(message: types.Message):
    await message.answer(
        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞",
                    url="https://google.com"
                )
            ]]
        )
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"


@router.message(Text("üìö –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"))
async def other_subjects(message: types.Message):
    await message.answer(
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"


@router.message(Text("‚úèÔ∏è –ù–∞–∑–∞–¥"))
async def back_to_main(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"


@router.message(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
async def cancel_action(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–¥–∞–Ω–∏—è"


@router.message(Text("üìù –ó–∞–¥–∞–Ω–∏—è"))
async def tasks_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=tasks_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–∞–¥–∞—á


@router.message(Text("üé≤ –°–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞—á–∏"))
async def random_tasks(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ ID –∑–∞–¥–∞–Ω–∏–π –í–°–ï–• —Ç–∏–ø–æ–≤
    task_ids = await get_shuffled_task_ids()

    if not task_ids:
        await message.answer("‚ùå –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", reply_markup=tasks_menu_kb())
        return

    await state.update_data(
        TASK_LIST=task_ids,
        CURRENT_INDEX=0,
        IS_RANDOM_SESSION=True  # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Å–ª—É—á–∞–π–Ω–∞—è —Å–µ—Å—Å–∏—è
    )

    await display_task_by_id(message, task_ids[0], state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

@router.message(Text("üìã –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å"))
async def show_part_one_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏:",
        reply_markup=part_one_types_kb()
    )


@router.message(Text("üìò –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å"))
async def part_two(message: types.Message):
    await message.answer(
        "–†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†",
        reply_markup=tasks_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"


@router.message(Text("üìù –ù–∞–∑–∞–¥"))
async def back_to_practice(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=practice_menu_kb()
    )


# -------------| –®–∞–±–ª–æ–Ω –≤—ã–≤–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è |------------- #
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è


@router.callback_query(F.data.startswith("next_task:"))
async def handle_next_task(callback: CallbackQuery, state: FSMContext):
    try:
        task_type = int(callback.data.split(":")[1])
        await state.update_data(current_type=task_type)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –í–ú–ï–°–¢–ï —Å —Ç–µ–æ—Ä–∏–µ–π
        async with AsyncSessionLocal() as session:
            stmt = select(Task).where(
                Task.type_number == task_type
            ).options(
                selectinload(Task.theory)  # –ñ–∞–¥–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–æ—Ä–∏—é
            )
            tasks = (await session.execute(stmt)).scalars().all()

            if not tasks:
                await callback.answer("–ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return

            task = random.choice(tasks)
            await display_task(callback.message, task, state)

    except Exception as e:
        print(f"Error in next_task: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–∫—Ç–∏–∫–∏


@router.callback_query(F.data == "stop_practice")
async def handle_stop_practice(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=practice_menu_kb()
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–æ—Ä–∏–∏


@router.callback_query(F.data.startswith("theory:"))
async def show_theory(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–æ—Ä–∏–µ–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        stmt = select(Task).where(Task.id == task_id).options(
            selectinload(Task.theory))
        task = (await session.execute(stmt)).scalar_one_or_none()

        if not task:
            await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer()
            return

        if task.theory:
            await callback.message.answer(
                f"üìö –¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {task.type_number}:\n\n{task.theory.content}",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"‚ö†Ô∏è –î–ª—è –∑–∞–¥–∞–Ω–∏—è {task.type_number} —Ç–µ–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                f"ID –∑–∞–¥–∞–Ω–∏—è: {task.id}, Theory ID: {task.theory_id}"
            )

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–æ—Ä–∞


@router.callback_query(F.data.startswith("solution:"))
async def handle_solution(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–∞–∑–±–æ—Ä–∞
    await callback.answer("–†–∞–∑–±–æ—Ä –±—É–¥–µ—Ç –∑–¥–µ—Å—å –ø–æ–∑–∂–µ")

    # reply_handlers.py


@router.message(Text("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"), StateFilter(TaskStates.SHOWING_RESULT))
async def next_task(message: Message, state: FSMContext):
    data = await state.get_data()
    task_ids = data.get('TASK_LIST', [])
    current_index = data.get('CURRENT_INDEX', 0)

    if not task_ids:
        await message.answer("‚ùå –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –ø—É—Å—Ç")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
    if current_index >= len(task_ids) - 1:
        if data.get('IS_RANDOM_SESSION', True):
            # –î–ª—è —Å–ª—É—á–∞–π–Ω–æ–π —Å–µ—Å—Å–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            new_task_ids = await get_shuffled_task_ids()
        else:
            # –î–ª—è —Å–µ—Å—Å–∏–∏ –ø–æ —Ç–∏–ø—É - –Ω–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞
            new_task_ids = await get_shuffled_task_ids(
                task_type=data.get('current_type')
            )

        if not new_task_ids:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è")
            return

        await state.update_data(
            TASK_LIST=new_task_ids,
            CURRENT_INDEX=0
        )
        await display_task_by_id(message, new_task_ids[0], state)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
        new_index = current_index + 1
        await state.update_data(CURRENT_INDEX=new_index)
        await display_task_by_id(message, task_ids[new_index], state)


@router.message(Text("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"))
async def stop_practice(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=practice_menu_kb()
    )
