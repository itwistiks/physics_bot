from config.settings import ADMIN_USER_ID, LEADS_TOKEN

from datetime import datetime, timedelta
from aiogram.fsm.storage.base import StorageKey

import aiohttp

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import or_f

from aiogram import Router, types
from aiogram.filters import Text
from core.keyboards.main_menu import (
    main_menu_kb,
    practice_menu_kb,
    cancel_kb
)


router = Router()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"

user_cooldowns = {}


class SupportStates(StatesGroup):
    waiting_for_message = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è


@router.message(Text("‚úâÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"))
async def support_start(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω
    last_request = user_cooldowns.get(user_id)
    if last_request and (datetime.now() - last_request) < timedelta(minutes=120):
        remaining = (last_request + timedelta(minutes=120)) - datetime.now()
        await message.answer(
            f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {remaining.seconds // 60} –º–∏–Ω.",
            reply_markup=main_menu_kb()
        )
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω
    user_cooldowns[user_id] = datetime.now()

    await state.set_state(SupportStates.waiting_for_message)
    await message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:",
        reply_markup=cancel_kb()
    )


@router.message(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
async def cancel_support(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=main_menu_kb()
    )


@router.message(SupportStates.waiting_for_message)
async def handle_support_message(message: types.Message, state: FSMContext):
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # print(f"üü¢ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {message.text}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
        async with aiohttp.ClientSession() as session:
            await session.post(
                f"https://api.telegram.org/bot{LEADS_TOKEN}/sendMessage",
                json={
                    "chat_id": ADMIN_USER_ID,
                    "text": f"‚úâÔ∏è –ü–∏—Å—å–º–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É \n\n–¢–µ–ª–µ–≥—Ä–∞–º: @{message.from_user.username}\nID: {message.from_user.id}\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{message.text}\n\n‚è±Ô∏è {datetime.now()}",
                    "parse_mode": "HTML"
                }
            )

        await message.answer(
            "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
            reply_markup=main_menu_kb()
        )
        await state.clear()  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞: {e}")
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ",
            reply_markup=main_menu_kb()
        )
        await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∞–∫—Ç–∏–∫–∞"


@router.message(Text("‚úèÔ∏è –ü—Ä–∞–∫—Ç–∏–∫–∞"))
async def practice_menu(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=practice_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"


@router.message(Text("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def show_stats(message: types.Message):
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await message.answer(
        "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        "‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: 15\n"
        "üìà –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: 80%\n"
        "üî• –†–µ–∫–æ—Ä–¥–Ω–∞—è —Å–µ—Ä–∏—è: 5 –≤–µ—Ä–Ω—ã—Ö –ø–æ–¥—Ä—è–¥",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–ø–µ—Ç–∏—Ç–æ—Ä"


@router.message(Text("üë®‚Äçüè´ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä"))
async def tutor_redirect(message: types.Message):
    await message.answer(
        "–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É:",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(
                    text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç",
                    url="https://google.com"
                )
            ]]
        )
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"


@router.message(Text("üìö –î—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã"))
async def other_subjects(message: types.Message):
    await message.answer(
        "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üõ†",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"


@router.message(Text("üîô –ù–∞–∑–∞–¥"))
async def back_to_main(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∞–∫—Ç–∏–∫–∏:",
        reply_markup=main_menu_kb()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∏—Ç—å"


@router.message(Text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))
async def cancel_action(message: types.Message):
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=main_menu_kb()
    )
