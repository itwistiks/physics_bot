from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sqlalchemy import select
from sqlalchemy.orm import selectinload
import random

from config.database import AsyncSessionLocal
from core.database.models import Task, Theory
from core.services.task_display import display_task

from ..keyboards.inline import (
    part_one_types_kb,
    answer_options_kb,
    theory_solution_kb
)
from ..keyboards.reply import (
    practice_menu_kb,
    task_navigation_kb
)

from core.services.task_display import display_task, display_task_by_id
from core.services.task_utils import get_shuffled_task_ids
# from core.services.answer_processing import process_answer
from core.services.answer_checker import check_answer

import logging


logger = logging.getLogger(__name__)


router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM


class TaskStates(StatesGroup):
    WAITING_ANSWER = State()
    SHOWING_RESULT = State()


@router.callback_query(F.data.startswith("part_one:"))
async def handle_task_type(callback: CallbackQuery, state: FSMContext):
    task_type = int(callback.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–º–µ—à–∞–Ω–Ω—ã–µ ID –∑–∞–¥–∞–Ω–∏–π –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —Ç–∏–ø–∞
    task_ids = await get_shuffled_task_ids(task_type=task_type)

    if not task_ids:
        await callback.answer("–ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    await state.update_data(
        TASK_LIST=task_ids,
        CURRENT_INDEX=0,
        IS_RANDOM_SESSION=False  # –§–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Å–µ—Å—Å–∏—è –ø–æ —Ç–∏–ø—É
    )

    await display_task_by_id(callback.message, task_ids[0], state)
    await callback.answer()


async def show_random_task(message: Message, task_type: int, state: FSMContext):
    try:
        async with AsyncSessionLocal() as session:
            stmt = select(Task).where(
                Task.type_number == task_type
            ).options(selectinload(Task.topic))

            tasks = (await session.execute(stmt)).scalars().all()

            if not tasks:
                await message.answer("–ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            task = random.choice(tasks)
            await state.update_data(current_task_id=task.id)
            await display_task(message, task, state)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")


@router.callback_query(F.data.startswith("answer:"))
async def handle_button_answer(callback: CallbackQuery, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_state = await state.get_state()
        if current_state != TaskStates.WAITING_ANSWER.state:
            await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ", show_alert=True)
            return

        # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback
        _, task_id, answer_idx = callback.data.split(":")
        task_id = int(task_id)
        answer_idx = int(answer_idx)

        # –°—Ä–∞–∑—É –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
        await callback.answer()

        async with AsyncSessionLocal() as session:
            # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π FOR UPDATE
                task = await session.execute(
                    select(Task)
                    .where(Task.id == task_id)
                    .with_for_update()
                )
                task = task.scalar_one_or_none()

                if not task:
                    await callback.message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                user_answer = task.answer_options[answer_idx]
                is_correct = str(user_answer).strip().lower() == str(
                    task.correct_answer).strip().lower()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(TaskStates.SHOWING_RESULT)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                # await update_user_stats(
                #     session=session,
                #     user_id=callback.from_user.id,
                #     task_id=task.id,
                #     is_correct=is_correct
                # )

        # # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        # await callback.message.edit_reply_markup(
        #     reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        # )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = await callback.message.answer(
            f"{'‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!' if is_correct else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ!'}",
            reply_markup=theory_solution_kb(task.id, task.complexity.value)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º /
        # await state.update_data(result_message_id=result_message.message_id)

    except Exception as e:
        logger.error(f"Error in handle_button_answer: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)


# -------------| –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–¥–∞—á–∏ |------------- #


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–æ—Ä–∏–∏


@router.callback_query(F.data.startswith("theory:"))
async def show_theory(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        try:
            async with session.begin():  # –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
                stmt = select(Task).where(Task.id == task_id).options(
                    selectinload(Task.theory).selectinload(Theory.topic)
                )
                task = (await session.execute(stmt)).scalar_one_or_none()

                if not task:
                    await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                    return  # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

                if not task.theory:
                    await callback.answer("‚ö†Ô∏è –¢–µ–æ—Ä–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
                    return

                topic_name = task.theory.topic.title_ru if task.theory.topic else "–ë–µ–∑ —Ç–µ–º—ã"
                theory_text = (
                    f"üìö –¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {task.type_number}\n"
                    f"–¢–µ–º–∞: {topic_name}\n\n"
                    f"{task.theory.content}"
                )

                try:
                    await callback.message.answer(theory_text, parse_mode="Markdown")
                except Exception as e:
                    logger.error(f"Markdown error: {e}")
                    await callback.message.answer(theory_text)

                # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–∫–æ–º–º–∏—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –±–ª–æ–∫–∞

        except Exception as e:
            logger.error(f"Database error: {e}", exc_info=True)
            await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–æ—Ä–∏–∏", show_alert=True)
        finally:
            await callback.answer()  # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–±–æ—Ä–∞


@router.callback_query(F.data.startswith("solution:"))
async def handle_solution(callback: CallbackQuery):
    try:
        task_id = int(callback.data.split(":")[1])

        async with AsyncSessionLocal() as session:
            # –Ø–≤–Ω–æ –Ω–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            async with session.begin():
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –¥–ª—è —á—Ç–µ–Ω–∏—è
                task = await session.execute(
                    select(Task)
                    .where(Task.id == task_id)
                    .with_for_update(read=True)
                )
                task = task.scalar_one_or_none()

                if not task:
                    await callback.answer("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
                    return

                if not task.video_analysis_url:
                    await callback.answer("‚ö†Ô∏è –í–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", show_alert=True)
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä–æ–º
                await callback.message.answer(
                    f"üé• –í–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä –∫ –∑–∞–¥–∞—á–µ {task.type_number}:\n"
                    f"{task.video_analysis_url}"
                )

        # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "–∑–∞–≥—Ä—É–∑–∫–∞" —É –∫–Ω–æ–ø–∫–∏
        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_solution: {e}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ—Ä–∞–∑–±–æ—Ä–∞", show_alert=True)
