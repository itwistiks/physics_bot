from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.filters import Text, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select
from sqlalchemy.orm import selectinload
import random
from config.database import AsyncSessionLocal
from core.database.models import Task, Theory
from core.keyboards.inline_menu import (
    part_one_types_kb,
    answer_options_kb,
    task_navigation_kb,
    theory_solution_kb
)
from core.keyboards.main_menu import practice_menu_kb

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM


class TaskStates(StatesGroup):
    WAITING_ANSWER = State()
    SHOWING_RESULT = State()


@router.message(Text("üìã –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å"))
async def show_part_one_menu(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏:",
        reply_markup=part_one_types_kb()
    )


@router.callback_query(F.data.startswith("part_one:"))
async def handle_task_type(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    task_type = int(callback.data.split(":")[1])
    await state.update_data(current_type=task_type)
    await show_random_task(callback.message, task_type, state)
    await callback.answer()


async def show_random_task(message: Message, task_type: int, state: FSMContext):
    try:
        async with AsyncSessionLocal() as session:
            stmt = select(Task).where(
                Task.type_number == task_type
            ).options(selectinload(Task.topic))

            tasks = (await session.execute(stmt)).scalars().all()

            if not tasks:
                await message.answer("–ó–∞–¥–∞–Ω–∏—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return

            task = random.choice(tasks)
            await state.update_data(current_task_id=task.id)
            await display_task(message, task, state)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")


async def display_task(message: Message, task: Task, state: FSMContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options_text = "\n".join(
        [f"{chr(65+i)}. {option}" for i, option in enumerate(task.answer_options)])
    text = (
        f"üìå –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task.type_number}\n\n"
        f"{task.task_content['text']}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_text}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if task.task_content.get('image'):
        msg = await message.answer_photo(
            photo=task.task_content['image'],
            caption=text,
            reply_markup=answer_options_kb(task.answer_options, task.id)
        )
    else:
        msg = await message.answer(
            text,
            reply_markup=answer_options_kb(task.answer_options, task.id)
        )

    await state.update_data(task_message_id=msg.message_id)
    await state.set_state(TaskStates.WAITING_ANSWER)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=task_navigation_kb(task.type_number)
    )


@router.callback_query(F.data.startswith("answer:"), StateFilter(TaskStates.WAITING_ANSWER))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    _, task_id, answer_idx = callback.data.split(":")
    answer_idx = int(answer_idx)

    async with AsyncSessionLocal() as session:
        task = await session.get(Task, int(task_id))
        if not task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        is_correct = (task.answer_options[answer_idx] == task.correct_answer)

        await callback.answer(
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!",
            show_alert=True
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.message.answer(
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.correct_answer}",
            reply_markup=theory_solution_kb(task.id)
        )

    await state.set_state(TaskStates.SHOWING_RESULT)


@router.message(Text("‚ñ∂Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ"), StateFilter(TaskStates.SHOWING_RESULT))
async def next_task(message: Message, state: FSMContext):
    data = await state.get_data()
    task_type = data.get('current_type')

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        await message.bot.delete_message(
            chat_id=message.chat.id,
            message_id=data.get('task_message_id')
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    if task_type:
        await show_random_task(message, task_type, state)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è")


@router.message(Text("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è"))
async def stop_practice(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=practice_menu_kb()
    )


@router.callback_query(F.data.startswith("theory:"))
async def show_theory(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ–æ—Ä–∏–µ–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
        stmt = select(Task).where(Task.id == task_id).options(
            selectinload(Task.theory))
        task = (await session.execute(stmt)).scalar_one_or_none()

        if not task:
            await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            await callback.answer()
            return

        if task.theory:
            await callback.message.answer(
                f"üìö –¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {task.type_number}:\n\n{task.theory.content}",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"‚ö†Ô∏è –î–ª—è –∑–∞–¥–∞–Ω–∏—è {task.type_number} —Ç–µ–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                f"ID –∑–∞–¥–∞–Ω–∏—è: {task.id}, Theory ID: {task.theory_id}"
            )

    await callback.answer()


@router.callback_query(F.data.startswith("solution:"))
async def show_solution(callback: CallbackQuery):
    task_id = int(callback.data.split(":")[1])

    async with AsyncSessionLocal() as session:
        task = await session.get(Task, task_id)
        if task:
            await callback.message.answer(
                f"üìù –†–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è {task.type_number}:\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.correct_answer}\n"
                f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {task.solution or '–†–∞–∑–±–æ—Ä –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )
        else:
            await callback.message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    await callback.answer()
