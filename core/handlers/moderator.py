from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, func, desc
from datetime import datetime, timedelta

from core.filters.admin import IsModeratorFilter
from core.database.models import User, UserProgress
from config.database import AsyncSessionLocal

router = Router()


@router.message(Command("active_users"), IsModeratorFilter())
async def cmd_active_users(message: types.Message):
    """–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"""
    try:
        async with AsyncSessionLocal() as session:
            week_ago = datetime.now() - timedelta(days=7)

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
            active_users = await session.execute(
                select(User, UserProgress.weekly_points)
                .join(UserProgress, User.id == UserProgress.user_id)
                .where(User.last_interaction_time >= week_ago)
                .order_by(desc(UserProgress.weekly_points))
                .limit(15)
            )

            if not active_users:
                await message.answer("üìä –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é")
                return

            result = ["üèÜ –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ–¥–µ–ª—è):\n"]
            for i, (user, weekly_points) in enumerate(active_users, 1):
                result.append(
                    f"{i}. @{user.username or '–ë–µ–∑ username'} (ID: {user.id})\n"
                    f"   ‚ö° XP –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_points}\n"
                    f"   üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {user.last_interaction_time.strftime('%d.%m.%Y %H:%M')}"
                )

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            text = "\n".join(result)
            if len(text) > 4000:
                for i in range(0, len(text), 4000):
                    await message.answer(text[i:i+4000])
            else:
                await message.answer(text)

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("top_users"), IsModeratorFilter())
async def cmd_top_users(message: types.Message):
    """–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—â–µ–º—É XP"""
    try:
        async with AsyncSessionLocal() as session:
            top_users = await session.execute(
                select(User, UserProgress.total_points)
                .join(UserProgress, User.id == UserProgress.user_id)
                .order_by(desc(UserProgress.total_points))
                .limit(10)
            )

            if not top_users:
                await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö")
                return

            result = ["üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP:\n"]
            for i, (user, total_points) in enumerate(top_users, 1):
                result.append(
                    f"{i}. @{user.username or '–ë–µ–∑ username'} (ID: {user.id})\n"
                    f"   ‚ö° –í—Å–µ–≥–æ XP: {total_points}\n"
                    f"   üéØ –°—Ç–∞—Ç—É—Å: {user.status.value}"
                )

            await message.answer("\n".join(result))

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("top_weekly_users"), IsModeratorFilter())
async def cmd_top_weekly_users(message: types.Message):
    """–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ XP –∑–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        async with AsyncSessionLocal() as session:
            top_users = await session.execute(
                select(User, UserProgress.weekly_points)
                .join(UserProgress, User.id == UserProgress.user_id)
                .order_by(desc(UserProgress.weekly_points))
                .limit(10)
            )

            if not top_users:
                await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é")
                return

            result = ["üèÜ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é:\n"]
            for i, (user, weekly_points) in enumerate(top_users, 1):
                result.append(
                    f"{i}. @{user.username or '–ë–µ–∑ username'} (ID: {user.id})\n"
                    f"   ‚ö° XP –∑–∞ –Ω–µ–¥–µ–ª—é: {weekly_points}\n"
                    f"   üéØ –°—Ç–∞—Ç—É—Å: {user.status.value}"
                )

            await message.answer("\n".join(result))

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@router.message(Command("mhelp"), IsModeratorFilter())
async def cmd_mhelp(message: types.Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
    help_text = (
        "üîß –ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        "/active_users - –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏\n"
        "/top_users - –¢–æ–ø 10 –ø–æ –æ–±—â–µ–º—É XP\n"
        "/top_weekly_users - –¢–æ–ø 10 –∑–∞ –Ω–µ–¥–µ–ª—é\n\n"

        "üë®‚Äçüè´ –ö–æ–º–∞–Ω–¥—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:\n"
        "/student_progress [@username] - –ü—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç—É–¥–µ–Ω—Ç–∞\n"
        "/send_feedback [@username] [message] - –û—Ç–ø—Ä–∞–≤–∏—Ç—å feedback\n"
    )
    await message.answer(help_text)
