from core.database.models import Complexity  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º enum —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardMarkup

from sqlalchemy import select
from config.database import AsyncSessionLocal
from core.database.models import Task, PartNumber, Complexity


def answer_options_kb(options: list, task_id: int):
    builder = InlineKeyboardBuilder()
    for i, option in enumerate(options):
        builder.button(text=f"{option}",
                       callback_data=f"answer:{task_id}:{i}")
    builder.adjust(1)
    return builder.as_markup()


def theory_solution_kb(task_id: int, complexity: str) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∞ "–¢–µ–æ—Ä–∏—è" (–≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å)
    builder.button(text="üìö –¢–µ–æ—Ä–∏—è", callback_data=f"theory:{task_id}")

    # –ö–Ω–æ–ø–∫–∞ "–†–∞–∑–±–æ—Ä" (—Ç–æ–ª—å–∫–æ –¥–ª—è HIGH —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)
    if complexity == Complexity.HIGH.value:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ–∂–Ω–æ—Å—Ç—å = 'high'
        builder.button(text="üé• –†–∞–∑–±–æ—Ä", callback_data=f"solution:{task_id}")

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ (–æ–¥–Ω–∞ –ø–æ–¥ –¥—Ä—É–≥–æ–π)
    builder.adjust(1)

    return builder.as_markup()


async def part_one_types_kb():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()

    async with AsyncSessionLocal() as session:
        async with session.begin():  # –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
            stmt = select(Task.type_number).where(
                Task.part_number == PartNumber.PART_ONE
            ).distinct().order_by(Task.type_number)

            result = await session.execute(stmt)
            type_numbers = result.scalars().all()

            if not type_numbers:
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                return builder.as_markup()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            for type_num in type_numbers:
                builder.button(
                    text=str(type_num),
                    callback_data=f"part_one:{type_num}"
                )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2)
            builder.adjust(2)

            return builder.as_markup()


async def part_two_types_kb():
    """–°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()

    async with AsyncSessionLocal() as session:
        async with session.begin():  # –Ø–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–∏–ø–æ–≤ –∑–∞–¥–∞–Ω–∏–π –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏
            stmt = select(Task.type_number).where(
                Task.part_number == PartNumber.PART_TWO
            ).distinct().order_by(Task.type_number)

            result = await session.execute(stmt)
            type_numbers = result.scalars().all()

            if not type_numbers:
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                return builder.as_markup()

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
            for type_num in type_numbers:
                builder.button(
                    text=str(type_num),
                    callback_data=f"part_one:{type_num}"
                )

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2)
            builder.adjust(2)

            return builder.as_markup()
