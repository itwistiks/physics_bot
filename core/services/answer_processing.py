# from aiogram.types import Message
# from aiogram.fsm.context import FSMContext
# from aiogram.types import Message, CallbackQuery
# from sqlalchemy.orm import selectinload

# from config.database import AsyncSessionLocal
# from core.database.models import Task
# from core.keyboards.inline import theory_solution_kb
# from core.services.stats_service import update_user_stats

# import logging

# logger = logging.getLogger(__name__)


# async def process_answer(message: Message, task_id: int, user_answer: str, state: FSMContext, callback: CallbackQuery = None):
#     """–ù–∞–¥—ë–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
#     try:
#         async with AsyncSessionLocal() as session:
#             # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –Ω—É–∂–Ω—ã–º–∏ —Å–≤—è–∑—è–º–∏
#             task = await session.get(
#                 Task,
#                 task_id,
#                 options=[
#                     selectinload(Task.topic),
#                     selectinload(Task.subtopic)
#                 ]
#             )

#             if not task:
#                 if callback:
#                     await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
#                 return False

#             # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
#             is_correct = str(user_answer).strip().lower() == str(
#                 task.correct_answer).strip().lower()

#             # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
#             try:
#                 await update_user_stats(session, message.from_user.id, task_id, is_correct)
#             except Exception as e:
#                 logger.error(f"Stats update failed: {e}")
#                 if callback:
#                     await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

#             # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
#             if callback:
#                 await callback.answer(
#                     "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!",
#                     show_alert=True
#                 )

#             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
#             await message.answer(
#                 f"üìå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.correct_answer}\n"
#                 f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {task.explanation or '–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
#                 reply_markup=theory_solution_kb(task_id)
#             )

#             await state.update_data(
#                 last_answer_correct=is_correct,
#                 waiting_for_answer=False
#             )
#             return True

#     except Exception as e:
#         logger.error(f"Error in process_answer: {e}")
#         if callback:
#             await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏", show_alert=True)
#         return False
