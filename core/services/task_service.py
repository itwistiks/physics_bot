from aiogram.types import Message, CallbackQuery
from sqlalchemy import select
from sqlalchemy.orm import selectinload
import random
from config.database import AsyncSessionLocal
from core.database.models import Task, Theory
from core.keyboards.inline_menu import (
    answer_options_kb,
    task_navigation_kb,
    theory_solution_kb
)
from core.keyboards.main_menu import practice_menu_kb
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup

from core.fsm.states import TaskStates


async def prepare_task_text(task: Task) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    :param task: –û–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è
    :return: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    """
    options = "\n".join(f"‚Ä¢ {opt}" for opt in task.answer_options)
    return (
        f"üìå <b>–ó–∞–¥–∞—á–∞ #{task.id}</b>\n"
        f"üî¢ –¢–∏–ø: {task.type_number}\n\n"
        f"{task.task_content['text']}\n\n"
        f"<i>–í–∞—Ä–∏–∞–Ω—Ç—ã:</i>\n{options}"
    )


async def get_random_task(task_type: int = None) -> Task:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    :param task_type: –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
    :return: –û–±—ä–µ–∫—Ç Task –∏–ª–∏ None –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
    """
    async with AsyncSessionLocal() as session:
        stmt = select(Task)

        if task_type is not None:
            stmt = stmt.where(Task.type_number == task_type)

        stmt = stmt.options(selectinload(Task.topic))
        tasks = (await session.execute(stmt)).scalars().all()
        return random.choice(tasks) if tasks else None


async def display_task(message: Message, task: Task, state: FSMContext):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
    options_text = "\n".join(
        [f"{chr(65+i)}. {option}" for i, option in enumerate(task.answer_options)])
    text = (
        f"üìå –¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task.type_number}\n\n"
        f"{task.task_content['text']}\n\n"
        f"–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{options_text}"
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞
    if task.task_content.get('image'):
        msg = await message.answer_photo(
            photo=task.task_content['image'],
            caption=text,
            reply_markup=answer_options_kb(task.answer_options, task.id)
        )
    else:
        msg = await message.answer(
            text,
            reply_markup=answer_options_kb(task.answer_options, task.id)
        )

    await state.update_data(
        task_message_id=msg.message_id,
        current_task_id=task.id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        current_type=task.type_number,
        current_task=task  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞–Ω–∏—è
    )
    await state.set_state(TaskStates.WAITING_ANSWER)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=task_navigation_kb(task.type_number)
    )


async def check_answer(callback: CallbackQuery, task_id: int, answer_idx: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    :param callback: –û–±—ä–µ–∫—Ç callback
    :param task_id: ID –∑–∞–¥–∞–Ω–∏—è
    :param answer_idx: –ò–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    :return: True –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, False –µ—Å–ª–∏ –Ω–µ—Ç
    """
    async with AsyncSessionLocal() as session:
        task = await session.get(Task, task_id)
        if not task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return False

        is_correct = (task.answer_options[answer_idx] == task.correct_answer)
        await callback.answer(
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–≤–µ—Ä–Ω–æ!",
            show_alert=True
        )

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.message.answer(
            f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.correct_answer}",
            reply_markup=theory_solution_kb(task.id)
        )

        return is_correct


async def show_task_theory(callback: CallbackQuery, task_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–æ—Ä–∏—é –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    :param callback: –û–±—ä–µ–∫—Ç callback
    :param task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    async with AsyncSessionLocal() as session:
        stmt = select(Task).where(Task.id == task_id).options(
            selectinload(Task.theory))
        task = (await session.execute(stmt)).scalar_one_or_none()

        if not task:
            await callback.message.answer("‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        if task.theory:
            await callback.message.answer(
                f"üìö –¢–µ–æ—Ä–∏—è –ø–æ –∑–∞–¥–∞–Ω–∏—é {task.type_number}:\n\n{task.theory.content}",
                parse_mode="HTML"
            )
        else:
            await callback.message.answer(
                f"‚ö†Ô∏è –î–ª—è –∑–∞–¥–∞–Ω–∏—è {task.type_number} —Ç–µ–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            )


async def show_task_solution(callback: CallbackQuery, task_id: int):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è
    :param callback: –û–±—ä–µ–∫—Ç callback
    :param task_id: ID –∑–∞–¥–∞–Ω–∏—è
    """
    async with AsyncSessionLocal() as session:
        task = await session.get(Task, task_id)
        if task:
            await callback.message.answer(
                f"üìù –†–∞–∑–±–æ—Ä –∑–∞–¥–∞–Ω–∏—è {task.type_number}:\n\n"
                f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {task.correct_answer}\n"
                f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {task.solution or '–†–∞–∑–±–æ—Ä –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}"
            )
        else:
            await callback.message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def cleanup_previous_task(message: Message, state: FSMContext):
    """
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    data = await state.get_data()
    if 'task_message_id' in data:
        try:
            await message.bot.delete_message(
                chat_id=message.chat.id,
                message_id=data['task_message_id']
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")


async def stop_practice_session(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø—Ä–∞–∫—Ç–∏–∫–∏
    :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    """
    await state.clear()
    await message.answer(
        "–ü—Ä–∞–∫—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
        reply_markup=practice_menu_kb()
    ), CallbackQuery
