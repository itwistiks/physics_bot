import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Tuple
from aiogram import Bot
from sqlalchemy import select, and_, or_, not_
from sqlalchemy.ext.asyncio import AsyncSession
from core.database.models import User, Reminder, UserStatus
from config.database import AsyncSessionLocal

logger = logging.getLogger(__name__)


class ReminderService:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.check_interval = 3600  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
        self.REMINDER_INTERVALS = {
            'promo': [1, 2, 24, 48, 72],  # —á–∞—Å—ã (1, 2 - —É–±—Ä–∞—Ç—å)
            'inactive': [120, 168, 240, 504, 720]  # —á–∞—Å—ã
        }

    async def get_users_for_reminders(self, session: AsyncSession) -> Dict[str, List[Tuple[int, str]]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–ø—É"""
        users = {'promo': [], 'inactive': []}
        current_time = datetime.utcnow()

        stmt = select(User.id, User.username, User.last_interaction_time).where(
            and_(
                not_(User.status.in_([
                    UserStatus.ADMIN.value,
                    UserStatus.MODERATOR.value,
                    UserStatus.TEACHER.value
                ])),
                User.last_interaction_time.is_not(None)
            )
        )

        result = await session.execute(stmt)

        for user_id, username, last_interaction in result.all():
            inactive_hours = (
                current_time - last_interaction).total_seconds() / 3600

            for reminder_type, intervals in self.REMINDER_INTERVALS.items():
                for interval in intervals:
                    if abs(inactive_hours - interval) <= 1:  # –¥–æ–ø—É—Å–∫ ¬±1 —á–∞—Å
                        users[reminder_type].append((user_id, username))
                        break

        return users

    async def get_reminder_text(self, session: AsyncSession, reminder_type: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑ –ë–î"""
        try:
            stmt = select(Reminder.text).where(
                Reminder.reminder_type == reminder_type
            ).order_by(Reminder.date.desc()).limit(1)

            result = await session.execute(stmt)
            return result.scalar_one_or_none()
        except Exception as e:
            logger.error(f"Error getting reminder text: {e}")
            return None

    async def send_reminders(self) -> Dict[str, int]:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        results = {'promo': 0, 'inactive': 0}

        async with AsyncSessionLocal() as session:
            users = await self.get_users_for_reminders(session)

            for reminder_type, user_list in users.items():
                text = await self.get_reminder_text(session, reminder_type) or self.get_default_text(reminder_type)

                for user_id, username in user_list:
                    try:
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=text
                        )
                        results[reminder_type] += 1
                        logger.info(
                            f"Sent {reminder_type} reminder to {username} ({user_id})")
                    except Exception as e:
                        logger.error(f"Failed to send to {user_id}: {e}")

        return results

    @staticmethod
    def get_default_text(reminder_type: str) -> str:
        """–¢–µ–∫—Å—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            'promo': "üì¢ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è! –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è - –∑–∞–ª–æ–≥ —É—Å–ø–µ—Ö–∞!",
            'inactive': "üì¢ –î–∞–≤–Ω–æ –Ω–µ –≤–∏–¥–µ–ª–∏—Å—å! –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –ø—Ä–∞–∫—Ç–∏–∫–µ —Å–µ–≥–æ–¥–Ω—è!"
        }.get(reminder_type, "–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å!")


async def send_inactivity_reminders(bot: Bot) -> Dict[str, int]:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π"""
    service = ReminderService(bot)
    return await service.send_reminders()
