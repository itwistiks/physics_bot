import logging
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from core.database.models import Task
from core.fsm.states import TaskStates
from config.database import AsyncSessionLocal
from ..keyboards.inline import answer_options_kb
from ..keyboards.reply import task_navigation_kb

logger = logging.getLogger(__name__)


async def display_task(message: Message, task: Task, state: FSMContext):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∑–∞–¥–∞–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        options_text = "\n".join(
            f"{chr(65+i)}. {option}"
            for i, option in enumerate(task.answer_options)
        )

        text = (
            f"üìå –ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è: {task.id}\n\n"
            f"–¢–∏–ø –∑–∞–¥–∞–Ω–∏—è: {task.type_number}\n\n"
            f"{task.task_content['text']}\n\n"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å —Ñ–æ—Ç–æ –∏–ª–∏ –±–µ–∑
        if task.task_content.get('image'):
            msg = await message.answer_photo(
                photo=task.task_content['image'],
                caption=text,
                reply_markup=answer_options_kb(task.answer_options, task.id)
            )
        else:
            msg = await message.answer(
                text,
                reply_markup=answer_options_kb(task.answer_options, task.id)
            )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            task_message_id=msg.message_id,
            current_task_id=task.id,
            current_type=task.type_number
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=task_navigation_kb(task.type_number)
        )

        await state.set_state(TaskStates.WAITING_ANSWER)
        await state.update_data(current_task_id=task.id)
        logger.info(
            f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WAITING_ANSWER –¥–ª—è –∑–∞–¥–∞–Ω–∏—è {task.id}")

    except Exception as e:
        logger.error(f"Error displaying task: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")


async def display_task_by_id(message: Message, task_id: int, state: FSMContext):
    """–ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –Ω–µ—è–≤–Ω—ã—Ö ROLLBACK"""
    try:
        logger.info(f"Starting task display for ID: {task_id}")

        async with AsyncSessionLocal() as session:
            # –Ø–≤–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            async with session.begin():
                task = await session.get(
                    Task,
                    task_id,
                    options=[
                        selectinload(Task.topic),
                        selectinload(Task.subtopic)
                    ]
                )

                if not task:
                    logger.error(f"Task {task_id} not found")
                    await message.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return

                # –Ø–≤–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                await session.commit()

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–Ω–µ —Å–µ—Å—Å–∏–∏
        await display_task(message, task, state)

    except Exception as e:
        logger.error(
            f"Critical error in display_task_by_id: {e}", exc_info=True)
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è")
